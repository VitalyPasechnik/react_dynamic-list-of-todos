{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","useState","todosFiltered","setTodosFiltered","query","setQuery","selected","setSelected","useEffect","filter","todo","completed","select","title","toLocaleLowerCase","includes","className","type","placeholder","value","onChange","e","target","map","classNames","readOnly","checked","userId","onClick","id","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","clearUser","user","setUser","resp","name","email","phone","App","setTodos","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.574fed22.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/interface';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  selectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n}) => {\n  const [todosFiltered, setTodosFiltered] = useState(todos);\n  const [query, setQuery] = useState('');\n  const [selected, setSelected] = useState('all');\n\n  useEffect(() => {\n    const select = () => {\n      switch (selected) {\n        case 'all':\n          return todos;\n          break;\n        case 'active':\n          return todos\n            .filter(todo => !todo.completed);\n          break;\n        case 'completed':\n          return todos\n            .filter(todo => todo.completed);\n          break;\n        default:\n          return todos;\n      }\n    };\n\n    setTodosFiltered(select()\n      .filter(todo => todo.title.toLocaleLowerCase()\n        .includes(query.toLocaleLowerCase())));\n  }, [query, selected, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__sidebar\">\n        <input\n          type=\"text\"\n          data-cy=\"filterByTitle\"\n          className=\"input-field\"\n          placeholder=\"Enter title of the task\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n        />\n        <select\n          title=\"select\"\n          value={selected}\n          onChange={e => setSelected(e.target.value)}\n        >\n          <option value=\"all\" selected>All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {todosFiltered.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                'TodoList__item--checked')}\n            >\n              <label>\n                {todo.completed ? (\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked\n                  />\n                ) : (\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                )}\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                    todo.userId === selectedUserId,\n                  },\n                )}\n                data-cy=\"userButton\"\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => request('/todos');\n\nexport const getUserbyId = (userId: number) => request(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { getUserbyId } from '../../api/api';\nimport { User } from '../../types/interface';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number,\n  clearUser: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUserId, clearUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUserbyId(selectedUserId).then(resp => setUser(resp));\n  }, [selectedUserId]);\n\n  return (\n    <>\n      {user && (\n        <div className=\"CurrentUser\">\n          <button\n            type=\"button\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              &nbsp;\n              {user.id}\n            </span>\n          </h2>\n\n          <h3\n            className=\"CurrentUser__name\"\n            data-cy=\"userName\"\n          >\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { getTodos } from './api/api';\nimport { CurrentUser } from './components/CurrentUser';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    getTodos().then(response => setTodos(response));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          selectUser={(userId) => setSelectedUserId(userId)}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              clearUser={() => setSelectedUserId(0)}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}